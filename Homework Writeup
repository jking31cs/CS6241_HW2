Write Up for Homework 2 for CS-6241.

Lessons Learned:
--------------------------

So, I put a lot of blame of the first homework on the fact that I did not know C++ and couldn't figure out how to set up llvm properly and even use it effectively.  So I spent a lot of time learning and reading on C++ to the point that I now feel more comfortable with it.  But as I read on llvm and trying to learn how to use it, I hit a giant wall that I wasn't able to overcome until about 4 hours ago (it is currently 9:30PM Sunday night that this is due).  I did start early on it, but I had other priorities that ended up taking over.  The extra 2 days has been a blessing I didn't expect, but spending one day buying a new computer since my old one died and re-setting up llvm (which I'm damn good at now) did cost me some precious time.  

The killer for this homework assignment is purely on me not understanding the material quick enough.  I didn't get access to the online papers for dependence based and demand driven reaching definitions until about 30 minutes ago, so I know I don't have enough time to read and fully grasp those concepts to do those questions on the homework.  On top of that, while I understand copy propogation at a high level, I cannot for the life of me figure out a good algorithm for it.  The book doesn't give one, and everything I found online went over my head.  I'm extremely worried about this class now that I've attempted a homework and instead of failing on the technology, I'm failing on the concepts.  I'm going to study heavily for this upcoming midterm if I want any shot of a B in this class.

Part 1:
--------------------------
I figured that since I fully understood the naive reaching analysis, that I would have no problems reading and understanding the more efficient algorithms for reaching analysis.  Boy was I wrong...  Anyways, I implemented naive reaching in ReachingAnalysis.cpp.  The Generation of the gen and kill sets was strictly by the book and I made the assumption that all definition instructions are in store instructions.  Doing that, I went through an O(n^2) way of generating the gen and kill sets.  I'd created one per instruction, then unioned them together for the BasicBlock gen/kill sets.  

Then, I used the same algorithm that's in the book for generating the In and Out sets, and printed them to the errs log.  I did this using standard sets, and creating my own classes for storing that information.  Personally, C++ is weird for not allowing the modification of list items in a for-each loop, but whatever, I used an iterator instead.

Part 2:
--------------------------
As I said in the intro, I understand constant propagation at a high level.  The idea is that we can replace variables that don't get redefined (ie are constants) with the constants themselves in order to save processing time.  Constant Folding goes one step further and simplifies constant expressions like k+ 3 (where k is never re-defined or used elsewhere) or 4 * 5.  The problem I had with understanding this on a deeper level came with the explanation of lattices, which vaguely looks like a mathematical definition for sets that I learned 3-4 years ago.  I personally don't remember this topic being touched on in class, but I did miss a lecture so I guess it was that one.  I'm still going to do it on my own time so that I can feel more comfortable with it for the midterm.

For unused Variable detection, I did something that seemed intuitive to me, since I couldn't find anything via googling or in the book for unused variable detection.  I went through every allocated instruction and put the pointer operand in a list labeled "Unused Variables".  I then went through every store instruction and checked the pointer operand and any operands in the predicate portion (which can be either an instruction or a constant) and checked to see if the variable was being used.  If it was, I removed that variable from the unused list.  When I completed my task, I printed out all unused variables.  

I problem I did encounter is that my retval variable that is allocated is never used in my test case, but I cannot deleted without causing horrible problems.  There is probably an underlying issue, but I don't really have the time to debug it.

Part 3
--------------------------
Similar to part 2 of the homework, I went with something that seemed intuitive, since googling and the book came up fruitless.  I went through every allocated inst and moved its pointer operand into an undefined list, and then I went through and looked for instructions that called that instruction and moved that into the errors list.  I'd update the undefined list whenever a variable was defined and remove it, but any calls to it before the definition would get caught, since instructions are in order.

I got out the line number information by compiling my testcode with the -g flag and using the meta data for that instruction. I'm worried that my test cases aren't complete enough to fully test this theory out, but I will turn in what I have.

Conclusion
--------------------------
I'm eternally grateful for the number of extensions given on this homework.  I feel that I'm vastly further along in understanding this framework and C++ then I was a week ago.  I'm now extremely worried that the stuff that I thought I understood in class I cannot implement fully nor really read papers on.  I'm going to work my ass off to do well on this midterm, as that's my last saving grace.
